# USAGE:
#   m4_shim \
#     "+13" "_mrconfig.EVAL.omr" \
#     "_mrconfig"

# KEEP FRESH:
#   meld ~/.depoxy/ambers/archetype/_mrconfig.EVAL.omr ~/.depoxy/running/_mrconfig &
# Or swap directions:
#   meld ~/.depoxy/running/_mrconfig ~/.depoxy/ambers/archetype/_mrconfig.EVAL.omr &

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# DXY_HEADER_AUTHOR
# DXY_HEADER_PROJECT
# DXY_HEADER_LICENSE

# ****************************************************************************************

# *** NOTE: THIS MRCONFIG ONLY RUNS ON THE CLIENT MACHINE / CLIENT-ONLY ***

[DEFAULT]
__USYNC__ =
  meld \
    DXY_DEPOXYARCHETYPE_DIR_TILDE/_mrconfig.EVAL.omr \
    ~/.depoxy/running/_mrconfig &

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
order = 133

# ========================================================================
# ------------------------------------------------------------------------

[${DEPOXYDIR_STINTS_FULL:-DXY_DEPOXYDIR_STINTS__HOME_}/DXY_DEPOXY_CLIENT_ID]
# NOTE: This repo has no remote (unless you consider the temporary mountpoint),
#       so stub remote-ish commands to avoid mr fails. See instead: dxup/dxdn.
lib = [ -z "DXY_DEPOXY_CLIENT_REMOTE" ] ||
  remote_set entrust "DXY_DEPOXY_CLIENT_REMOTE"
checkout = [ -z "DXY_DEPOXY_CLIENT_REMOTE" ] ||
  mr_repo_checkout
#
fetch = true
pull = true
push = true
update = true
# Should we include with "vendor", or separate the two?
#   skip = mr_exclusive "client" && mr_exclusive "vendor"
skip = mr_exclusive "client"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

lib =
  #
  CLEARED_ACI="Entrust: autoci"
  PRIVATE_ACI="PRIVATE: autoci*"
  #
  git_auto_commit_one_docs () {
    git_auto_commit_one "$1" -m "${3:-${CLEARED_ACI}}: Docs: ${2:-$1}"
  }
  #
  git_auto_commit_one_omr () {
    git_auto_commit_one "$1" -m "${3:-${CLEARED_ACI}}: OMR: Update: ${2:-$1}"
  }
  #
  git_auto_commit_one_update () {
    git_auto_commit_one "$1" -m "${3:-${CLEARED_ACI}}: Update: ${2:-$1}"
  }

autocommit =
  # For completeness `git ls-files`, we ensure that all repo files are under
  # autocommit (or documented why not). And for comparability for `ls-files`,
  # we list files in the same order.
  # - SAVVY: Don't spent time crafting more helpful commits for the DXC project.
  #   You can craft better commits if/when you merge back to the DXA template
  #   project, but the client itself is ephemeral (you'll abandon the project
  #   when you move on to the next Client), so you needn't bother maintaining
  #   a more ideal Git history (just shovel everything into the repo and move
  #   on).
  #
  # ***
  #
  local depoxy_client_id="$(basename -- "${MR_REPO}")"
  #
  # Prepare args, e.g., `autocommit -y`, or `autocommit -f`.
  git_auto_commit_parse_args "$@"
  #
  local ambers_path="${DEPOXYAMBERS_DIR:-DXY_DEPOXYAMBERS_DIR__HOME_}"
  #
  # ***
  #
  # NOTE: Many/all of the `find` calls below fail if any paths contain spaces.
  #
  # ***
  #
  git_auto_commit_one_update ".gitignore"
  git_auto_commit_one_update ".hostnames"
  git_auto_commit_one_update ".ignore"
  git_auto_commit_one_update "LICENSE"
  #
  git_auto_commit_one_omr "_mrconfig"
  #
  # - Auto-commit just "_mrconfig-DXY_VENDOR_NAME":
  #     git_auto_commit_one_omr "_mrconfig-DXY_VENDOR_NAME" "" "${PRIVATE_ACI}"
  # - Auto-commit "_mrconfig-DXY_VENDOR_NAME" and the project-specific configs:
  local bizconfs="$(\
    find * -name "_mrconfig-DXY_VENDOR_NAME" -o -name "_mrconfig-DXY_VENDOR_NAME--*" \
  )"
  if [ -n "${bizconfs}" ]; then
    git_auto_commit_many ${bizconfs} \
      -m "${PRIVATE_ACI}: OMR: Update: _mrconfig-DXY_VENDOR_NAME[--*]"
  fi
  #
  git_auto_commit_one "_mrconfig-DXY_VENDOR_NAME" \
    -m "${CLEARED_ACI}: DXA: OMR: Update: _mrconfig-DXY_VENDOR_NAME"
  #
  for path in \
    "README"* \
    ".whilom/README"* \
  ; do
    if [ -f "${path}" ]; then
      git_auto_commit_one_docs "${path}"
    fi
  done
  #
  # Ideally, .whilom/ files would be scoped the same as they'd be at the
  # same path under root DXC/. But this is a rarely-used, niche feature,
  # so follow this convention: Use .whilom/home/DXY_VENDOR_HOME_NAME/ for PRIVATE files.
  # Anything else under .whilom/ will be auto-committed unscoped.
  if [ -d ".whilom/home/DXY_VENDOR_HOME_NAME/" ]; then
    git_auto_commit_many $(find .whilom/home/DXY_VENDOR_HOME_NAME/ -type f -o -type l) \
      -m "${PRIVATE_ACI}: Update: .whilom/home/DXY_VENDOR_HOME_NAME/"
  fi
  git_auto_commit_many $(find .whilom/ -type f -o -type l) \
    -m "${CLEARED_ACI}: Update: .whilom/"
  #
  # ***
  #
  # Vendor-related reSTfold docs.
  #
  git_auto_commit_one_update "docs/.ignore" "" "${PRIVATE_ACI}"
  #
  # git_auto_commit_many \
  #   "docs/Backlog_Client_${depoxy_client_id}.rst" \
  #   "docs/Donelog_Client_${depoxy_client_id}.rst" \
  #   "docs/Woodlot_Client_${depoxy_client_id}.rst" \
  #   "docs/Worklog_Client_${depoxy_client_id}.rst" \
  #   -m "PRIVATE: autoci: Docs: Work notes."
  #  #-m "PRIVATE: autoci: Update: Docs."
  #
  # NOTE: This `find` won't work if there are spaces in any paths.
  # NOTE: Enable MRT_LINK_FORCE so ' T' git-status typechanges are included.
  MRT_LINK_FORCE=0 git_auto_commit_many $(find docs/ -type f -o -type l) \
    -m "${PRIVATE_ACI}: Docs: Work notes"
  #
  # ***
  #
  git_auto_commit_one_update "home/.config/depoxy/depoxyrc" "DXC depoxyrc."
  #
  git_auto_commit_one_update "home/.config/karabiner/README.rst"
  git_auto_commit_one_update \
    "home/.config/karabiner/assets/complex_modifications/3110-client-DXY_DEPOXY_CLIENT_ID-private.json.example"
  git_auto_commit_one_update \
    "home/.config/karabiner/assets/complex_modifications/9210-privte-docs-launchers-private.json"
  #
  # MAYBE/2023-01-12: Handle personal mods better:
  # - 1.) Current sol'n: Update _mrconfig after deploy and
  #       add personal mods (like I've done here w/ 9310).
  # - 2.) Auto-commit complex_modifications/* (so user does
  #       not have to do anything).
  # - 3.) Source a personal _mrconfig... that you'd add
  #       to each DXC after deploy, so similar amount of
  #       work (though could automate placing separate
  #       file easier than patching this file)...
  #       - So either auto-commit w/ glob; or add personal hooks to DXC autocommit and infuse...
  git_auto_commit_one_update \
    "home/.config/karabiner/assets/complex_modifications/9310-custom-docs-launchers-private.json"
  #
  #
  git_auto_commit_one_update "home/.config/karabiner/karabiner.json"
  #
  git_auto_commit_one_update "home/.config/tig/config"
  #
  # *** Other home/.*
  #
  if [ -d "${HOME}/.aws" ]; then
    mkdir -p "${MR_REPO}/home/.aws"
    command cp -- "${HOME}/.aws/config" "${MR_REPO}/home/.aws/config"
    command cp -- "${HOME}/.aws/credentials" "${MR_REPO}/home/.aws/credentials"
    # NOTE: This `find` won't work if there are spaces in any paths.
    git_auto_commit_many $(find home/.aws/ -type f -o -type l) \
      -m "${PRIVATE_ACI}: Update: home/.aws/ files"
  fi
  #
  git_auto_commit_one_update "home/.depoxy/_gitignore"
  git_auto_commit_one_update "home/.depoxy/stints/_ignore"
  #
  git_auto_commit_one_update "home/.depoxy/stints/running/DXY_VENDOR_DOTFILES_NAME/README.md"
  #
  git_auto_commit_one_update "home/.finicky.js" "~/.finicky.js config."
  #
  git_auto_commit_one_update "home/.gitconfig.user"
  git_auto_commit_one_update "home/.gitconfig.user-business" "" "${PRIVATE_ACI}"
  git_auto_commit_one_update "home/.gitconfig.user-personal"
  #
  git_auto_commit_one_update "home/.kit/_git/info/exclude"
  #
  # We track ~/.kube/config by copying it...
  if [ -f "${HOME}/.kube/config" ]; then
    command cp -- "${HOME}/.kube/config" "${MR_REPO}/home/.kube/config"
    #
    # NOTE: This `find` won't work if there are spaces in any paths.
    git_auto_commit_many $(find home/.kube/ -type f -o -type l) \
      -m "${PRIVATE_ACI}: Update: home/.kube/ files"
  fi
  git_auto_commit_one_update "home/.kube/PRIVATE"
  #
  git_auto_commit_one_update "home/.local/share/dob/dob.sqlite"
  # E.g., home/.local/share/dob/dob.sqlite-user-template
  # - BWARE: This call breaks if any found path contains spaces.
  git_auto_commit_many $(find home/.local/share/dob/ \( -type f -o -type l \) -a -name dob.sqlite-*) \
    -m "${CLEARED_ACI}: Update: home/.local/share/dob/dob.sqlite-* files"
  #
  if [ -f "home/.netrc" ]; then
    git_auto_commit_one_update "home/.netrc" "" "${PRIVATE_ACI}"
  fi
  #
  if [ -f "home/.npmrc" ]; then
    git_auto_commit_one_update "home/.npmrc" "" "${PRIVATE_ACI}"
  fi
  #
  # *** Password Store
  #
  aci_password_store () {
    git_auto_commit_new "home/.password-store" \
      -m "${PRIVATE_ACI}: Password Store updates"
    #
    local pass_gpg_id="${HOME}/.password-store/.gpg-id"
    local gpg_id_backup="home/.password-store/.gpg-id"
    if [ -f "${pass_gpg_id}" ] && [ ! -h "${pass_gpg_id}" ]; then
      command cp -- "${pass_gpg_id}" "${gpg_id_backup}"
    fi
    git_auto_commit_one_update "${gpg_id_backup}" "" "${PRIVATE_ACI}"
    #
    local enterprise_creds="${HOME}/.password-store/DXY_VENDOR_NAME/signon.gpg"
    local creds_backup="home/.password-store/enterprise-creds.gpg"
    if [ -f "${enterprise_creds}" ] && [ ! -h "${enterprise_creds}" ]; then
      command cp -- "${enterprise_creds}" "${creds_backup}"
    fi
    git_auto_commit_one_update "${creds_backup}"
  }
  aci_password_store
  #
  # *** GPG
  #
  aci_backup_gnupg () {
    local gpg_backup="home/.gnupg"
    # The `cp` will work without this remove, just FYI.
    command rm -rf -- "${gpg_backup}"
    mkdir "${gpg_backup}"
    # Copy normal, non-dot files and directories.
    find "${HOME}/.gnupg/"* -maxdepth 0 \( -type f -o -type d \) \
      -exec command cp -a -- {} "${gpg_backup}" \;
    git_auto_commit_many $(find ${gpg_backup}/ -type f -o -type l) \
      -m "${CLEARED_ACI}: Update: ${gpg_backup}/"
  }
  aci_backup_gnupg
  #
  # *** SSH
  #
  git_auto_commit_one_update "home/.ssh/config"
  #
  # *** VIM
  #
  # User Vim config.
  depoxy_client_autocommit_vimprojects () {
    # CXREF: ~/.depoxy/ambers/bin/vimprojects-create-copy-without-vendor-projects
    ${ambers_path}/bin/vimprojects-create-copy-without-vendor-projects
    #
    git_auto_commit_one "home/.vim/pack/landonb/start/dubs_project_tray/.vimprojects" \
      -m "${PRIVATE_ACI}: Vimprojects         (Client project-tray drawer)"
    git_auto_commit_one "home/.vim/pack/landonb/start/dubs_project_tray/.vimprojects--purged" \
      -m "${CLEARED_ACI}: Vimprojects--purged (DepoXy projects only)"
    #
    # Dob, easy-as-pypi, and related Python projects.
    git_auto_commit_one "home/.vim/pack/landonb/start/dubs_project_tray/.vimprojects--dob" \
      -m "${CLEARED_ACI}: Vimprojects--dob"
  }
  depoxy_client_autocommit_vimprojects
  #
  git_auto_commit_one_update "home/.vim/pack/landonb/start/dubs_grep_steady/dubs_projects.vim" \
    "" "${PRIVATE_ACI}"
  #
  # Manage the spell file, and alert if parts differ from the whole.
  #   🎩🪄🔮✨  🧙📚👧🦁🏰   ⊃━☆ﾟ
  debug "$(fg_mintgreen)$(attr_emphasis)conjure spells$(attr_reset)" \
    "🔮 $(fg_lightblue)(∩ ͡° ͜ʖ ͡°)⊃━☆ﾟ✨$(attr_reset)"
  # Remove header and footer, e.g.,
  #   mr spells: /Users/user/.depoxy/stints/1234
  #   ...
  #  (.4 secs.) mr spells: finished (1 ok)
  # - Easy sol'n: -mM
  # - Hard sol'n: If not for -mM to inhibit `mr` annotation:
  #     ... | $(command -v gtail || command -v tail) -n +2 \
  #         | $(command -v ghead || command -v head) -n -1 ...
  #   - Noting that built-in macOS `head` lacks `-n` feature.
  SHCOLORS_OFF=false \
  SPF_PRINT_SPELLS=false mr -d . -n -mM spells "$@" 2>&1 \
    | sed 's/^/  /'
  printf "\n"
  #
  # ***
  #
  # SAVVY/2024-04-28: The Chrome Bookmarks capture is not completely
  # automated, but it's fairly close.
  # - If the user updates the "Bookmarks" file, we'll assume it's a raw
  #   copy of the original file. As such, it might contain private
  #   bookmarks (work org links), and we'll commit it PRIVATEly.
  # - If the user creates or updates any other file with a name that starts
  #   with "bookmarks" (case-insensitive), we'll commit that file unscoped.
  #
  # - MAYBE/2020-12-18: Update "Bookmarks" automatically.
  # - Either copy on 'autocommit'; or Symlink the actual Chrome bookmarks
  #   file to the DepoXy Client copy (setup the symlink on 'infuse', then
  #   whenever it changes, 'autocommit' will capture the changes).
  #   - Because the file is committed PRIVATE, this is "safe".
  #   - MAYBE: Don't over-commit, maybe throttle to daily commit.
  #
  # - MAYBE/2024-04-28: Use `jq` to "purify" a copy of the Bookmarks file.
  #   - You would need to omit PRIVATE bookmarks somehow.
  #     - One idea: Have user update environ or rules file to specifiy
  #       top-level BM Folder names to include in the "purged" copy.
  #
  depoxy_client_autocommit_chrome_bookmarks () {
    local chrome_dir
    if [ "$(uname)" = "Darwin" ]; then
      chrome_dir="Library/Application Support/Google/Chrome/Default"
    elif [ "$(uname)" = "Linux" ]; then
      chrome_dir=".config/google-chrome/Default"
    else
      fatal "ERROR: Unsupported, Unknown Platform: “$(uname)”"
    fi
    #
    local chrome_bms_json="${chrome_dir}/Bookmarks"
    mkdir -p "home/${chrome_dir}"
    #
    # Chrome won't create this file until the user makes their first BM.
    # - MAYBE: As mentioned in comment above, symlink Chrome file to ours.
    if [ -f "${HOME}/${chrome_bms_json}" ]; then
      # Throttle commits to `-mtime +n` 24-hour periods since now.
      if [ ! -f "home/${chrome_bms_json}" ] \
        || [ -n "$(find "home/${chrome_bms_json}" -mtime +1 -print)" ] \
      ; then
        command cp -- "${HOME}/${chrome_bms_json}" "home/${chrome_bms_json}"
      fi
    fi
    git_auto_commit_one "home/${chrome_bms_json}" -m "${PRIVATE_ACI}: Chrome BMs (orig JSON)"
    #
    # We'll also assume any file named "bookmarks.html" is also private.
    local chrome_bms_html="${chrome_dir}/bookmarks.html"
    local its_been_awhile=false
    if [ -f "home/${chrome_bms_html}" ]; then
      git_auto_commit_one "home/${chrome_bms_html}" \
        -m "${CLEARED_ACI}: Chrome BMs (HTML export)."
      # I suppose we could always let the user know if it's been a while.
      if [ -n "$(find "home/${chrome_bms_html}" -mtime +13 -print)" ]; then
        its_been_awhile=true
      fi
    fi
    if ${DXY_ALERT_BMS_EXPORT:-false}; then
      if [ ! -f "home/${chrome_bms_html}" ] || ${its_been_awhile}; then
        if ${its_been_awhile}; then
          notice "STALE: It's been a while since you've exported Chrome Bookmarks HTML"
        fi
        notice "SAVVY: If you want, export Chrome bookmarks HTML to"
        notice "  $(echo "${MR_REPO}/home/${chrome_bms_html}" | sed 's/ /\\ /g')"
        notice "and we'll capture a private copy for you"
      fi
    fi
    #
    # MAYBE: See comment above re: Generated sanctified copy using `jq`, then, e.g.,
    #
    #  git_auto_commit_one "home/${chrome_bms_json}--purged" -m "${CLEARED_ACI}: Chrome BMs (sanitized)."
    #
    # - For now, user can generate such a file manually, and we'll happily
    #   auto-commit any other Bookmarks file here.
    #
    local bms_file
    find "home/${chrome_dir}" -maxdepth 1 -name "Bookmarks" -prune -o -iname "bookmarks*" -print \
      | while IFS= read -r bms_file \
    ; do
      git_auto_commit_one_update "${bms_file}"
    done
  }
  depoxy_client_autocommit_chrome_bookmarks
  #
  # ***
  #
  depoxy_client_autocommit_dob_assets () {
    git_auto_commit_one_update "home/Library/Application Support/dob/dob.conf"
    #
    if command -v dob > /dev/null; then
      dob --no-color export \
        -o "home/Library/Application Support/dob/dob.sqlite.export"
    else
      notice "OHYOU: Install \`dob\`"
    fi
    #
    git_auto_commit_one "home/Library/Application Support/dob/dob.sqlite.export" \
      -m "${CLEARED_ACI}: Latest \\\`dob export\\\`."
  }
  depoxy_client_autocommit_dob_assets
  #
  # ***
  #
  git_auto_commit_one "home/_gitignore-macOS" \
    -m "${CLEARED_ACI}: DX: Update ~/.gitignore"
  git_auto_commit_one "home/_git/info/exclude" \
    -m "${CLEARED_ACI}: DX: Update ~/.gitignore.local"
  #
  # ***
  #
  git_auto_commit_one_update "home/bashrc.DXY_USERNAME.sh"
  git_auto_commit_one_update "home/bashrc.DXY_VENDOR_NAME.sh" "" "${PRIVATE_ACI}"
  git_auto_commit_one_update "home/bashrx.private.DXY_HOSTNAME.sh"
  #
  git_auto_commit_one_update "home/crontab.DXY_USERNAME" "" "${PRIVATE_ACI}"
  #
  git_auto_commit_one "home/dubs_projects.vim" \
    -m "${PRIVATE_ACI}: home/dubs_projects.vim (grep-steady mappings)"
  #
  # Symlink.
  git_auto_commit_one_update "home/.vimprojects"
  #
  git_auto_commit_many $(find home/vim-trap/ -type f -o -type l) \
    -m "${CLEARED_ACI}: Update: home/vim-trap/"
  #
  # NOTE: This `find` won't work if there are spaces in any paths.
  git_auto_commit_many $(find home/DXY_VENDOR_HOME_NAME/ -type f -o -type l) \
    -m "${PRIVATE_ACI}: Update: home/DXY_VENDOR_HOME_NAME/"
  #
  # ***
  #
  # Personal reSTfold docs.
  #
  # NOTE: This `find` won't work if there are spaces in any paths.
  git_auto_commit_many $(find private/docs/ -type f -o -type l) \
    -m "${CLEARED_ACI}: Docs: Personal notes"
  #
  git_auto_commit_one_update "private/private.not-private" "" "${PRIVATE_ACI}"
  # ===
  # ***
  # ===
  #
  # *** Extras not related to `git ls-files` files.
  #
  # macOS Desktop file (delete).
  # - Toss the Desktop Services Store. It's created by Finder to store icon layout,
  #   background image, etc. But who uses Finder? Remove for less noisy `ls` output.
  command rm -f -- "./.DS_Store"
  #
  # ===
  # ***
  # ===
  #
  # *** Tree dumps. (Put this toward end, b/c some steps above create files.)
  #
  # 2021-08-22: I added these tree dumps 2021-01-31 but they've been of
  #             no utility to me. So not quite sure why I'm preserving.
  depoxy_client_autocommit_tree_dumps () {
    tree -n -a -I .git/ -I "DXY_VENDOR_HOME__HOME_" > "home/.config/${depoxy_client_id}-tree.txt"
    tree -C -a -I .git/ -I "DXY_VENDOR_HOME__HOME_" > "home/.config/${depoxy_client_id}-tree.col"
    git_auto_commit_many \
      "home/.config/${depoxy_client_id}-tree.txt" \
      "home/.config/${depoxy_client_id}-tree.col" \
      -m "${CLEARED_ACI}: Client ${depoxy_client_id} project \\\`tree\\\`"
  }
  depoxy_client_autocommit_tree_dumps
  #
  # ===
  # ***
  # ===
  #
  insist_nothing_not_committed () {
    local ignore_spell_melds="$(echo \
      ":!home/.vim/spell/sync-spells--*-new.sh" \
      ":!home/.vim/spell/en.utf-8.add--*" \
    )"
    #
    if test -z "$(git status --porcelain -- ${ignore_spell_melds})"; then
      #
      return 0
    fi
    #
    >&2 error "ERROR: Found stray DXC files not registered with autocommit:"
    git status -s -- ${ignore_spell_melds} | >&2 sed 's/^.. /  /'
    #
    return 1
  }
  insist_nothing_not_committed

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

spells =
  git_auto_commit_parse_args "$@"
  # CXREF: ~/.depoxy/ambers/home/.kit/git/ohmyrepos/lib/spellfile.txt-runner.sh
  #   ~/.kit/txt/spellfile.txt/bin/spells.sh
  commit_sorted_spells_and_alert_if_conflicts
  git_auto_commit_one_update "home/.vim/spell/en.utf-8.add--personal" \
     "" "${PRIVATE_ACI}"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# CXREF: See GIT_POST_REBASE_EXEC usage.
# - Used post-rebase to remake hard links.
# SAVYY: Call link_hard from infusePostRebase, not infuse.
infusePostRebase =
  #
  # *** DepoXy filespace
  #
  # Remember that Git doesn't allow symlinked .gitignore .nomore.
  link_hard "${MR_REPO}/home/.depoxy/_gitignore" \
    "${DEPOXYDIR_BASE_FULL:-DXY_DEPOXYDIR_BASE__HOME_}/.gitignore"
  #
  # *** GIT
  #
  # Note Git ≥2.32.0 disallows symlinked .gitignore, so hard link it.
  #
  #    FIXME/2022-10-13: Certain (unsure which) repo changes break symlinks.
  #    - So often this link_hard will Be Like Nope.
  #    - I'd say add a --force option, and clobber the target.
  #      - This is a little risky...
  #        Another option is to move it to ~/.trash,
  #          and then just `warn` the user...
  #
  link_hard \
    "${MR_REPO}/home/_gitignore-macOS" \
    "${HOME}/.gitignore"
  #
  #
  # *** ~/.kube
  #
  # NOTE: If you create a new kubeconfig, copy to DXC manually, then infuse,
  #       then aci, it'll get picked up.
  for kubeconfig in "${MR_REPO}/home/.kube/"*.yaml; do
    # If nothing globbed, ${kubeconfig} is the glob string.
    if [ -f "${kubeconfig}" ]; then
      mkdir -p "${HOME}/.kube"
      #
      link_hard \
        "${kubeconfig}" \
        "${HOME}/.kube/$(basename -- "${kubeconfig}")"
    fi
  done

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

infuse =
  # Get the client name, e.g., 'XXXX' from DXY_DEPOXYDIR_STINTS_TILDE/XXXX.
  local depoxy_client_id="$(basename -- "${MR_REPO}")"
  #
  local ambers_path="${DEPOXYAMBERS_DIR:-DXY_DEPOXYAMBERS_DIR__HOME_}"
  #
  # *** `mredit` wiring
  #
  # CXREF: DXY_DEPOXY_PROJLNS_DIR_TILDE/mymrconfigs/
  symlink_overlay_file \
    "${MR_REPO}/_mrconfig" \
    "${MREDIT_CONFIGS:-${DEPOXY_PROJLNS:-${HOME}/.projlns}/mymrconfigs}/client-${depoxy_client_id}-mrconfig"
  #
  # *** Guard clause
  #
  # Stop now if *not* the active DepoXy Client
  #
  #   (the tasks below will overwrite the active client's
  #    symlinks and make this project the active client)
  #
  # Check if this is the active client, and stop now if not.
  # - Normally, the active client is specified by DEPOXY_CLIENT_ID
  #     hard-coded from ~/.config/depoxy/depoxyrc
  #   Or it's the largest-numbered client under stints/
  #     per default used by ~/.depoxy/ambers/core/depoxy_fs.sh
  # - But in the context of OMR config, the active client is
  #   the one specified by ~/.depoxy/running, because it's this
  #   infuse action (see below) that wires ~/.config/depoxy/depoxyrc
  #   - So deploy-archetype.sh (or the user) can point
  #     ~/.depoxy/running at the client they want to activate,
  #     and then run `mr -d ~/.depoxy/running infuse` to wire it.
  #
  local depoxydir_running_full="${DEPOXYDIR_RUNNING_FULL:-DXY_DEPOXYDIR_RUNNING__HOME_}"
  local running_now="$(realpath -- "${depoxydir_running_full}")"
  local project_abs="$(realpath -- "${MR_REPO}")"
  if [ "${project_abs}" != "${running_now}" ]; then
    warn "BWARE: This is not the active client"
    warn "- That honor goes to"
    warn "    ${running_now}"
    warn "- To make this project the active client, try"
    warn "    command rm \"${depoxydir_running_full}\""
    warn "    command ln -s \\"
    warn "      \"${MR_REPO}\" \\"
    warn "      \"${depoxydir_running_full}\""
    warn "    mr -d \"${MR_REPO}\" -n infuse"
    #
    return 1
  fi
  #
  # *** Hard links
  #
  mr -d . -n infusePostRebase
  #
  # *** DepoXy config
  #
  # Place the ~/.config/depoxy/depoxyrc config.
  # - Identifies the depoxy_client_id, even when the client is unmounted.
  #   Mostly necessary so DepoXy Ambers knows which `321open` to run.
  # - This file also sets custom paths, but I've never used that feature.
  # - Note this is the only file *copied* somewhere, and not symlinked,
  #   because it needs to be available when this project is not mounted.
  # Note this is not a symlink because repo might be offline.
  # FIXME: TRYME/2022-10-23: Could this be a hard link?
  #        - Or would the link get broken on unmount?
  # FIXME: You might want to diff this file and alert if user changed
  #        ~/.config copy, before clobber-overwriting.
  #
  mkdir -p "${HOME}/.config/depoxy"
  command cp -f -- \
    "${MR_REPO}/home/.config/depoxy/depoxyrc" \
    "${HOME}/.config/depoxy/depoxyrc"
  info "$(font_emphasize "Copied depoxyrc") $(font_highlight ${HOME}/.config/depoxy/depoxyrc)"
  #
  # *** DepoXy filespace
  #
  # See 'infusePostRebase' task for DXY_DEPOXYDIR_BASE_TILDE/.gitignore hard link.
  #
  # Create the DXY_DEPOXYDIR_RUNNING_TILDE → DXY_DEPOXYDIR_STINTS_TILDE/XXXX symlink.
  # - Note that ${DEPOXY_CLIENT_ID} is from user's environ, which depends on
  #   this symlink probably having existed when ${DEPOXY_CLIENT_ID} was set.
  #   - So generally the symlink probably already exists, but if it was
  #     clobbered or changed you can repair it if you have a shell still
  #     using the proper client ID.
  #
  # See guard clause above: This call is a no-op:
  # - The symlink already exists and is correct.
  symlink_overlay_dir "${MR_REPO}" "${depoxydir_running_full}"
  #
  # *** OMR
  #
  # .mrinfuse/ nesting
  local dxy_home_work="${MR_REPO}/home/DXY_VENDOR_HOME_NAME"
  local usr_home_work="DXY_VENDOR_HOME__HOME_"
  local home_work_hint=""
  # These paths are part the Archetype boilerplate so exist initially,
  # but user may have moved or removed them.
  if [ ! -d "${dxy_home_work}" ]; then
    home_work_hint="No $(font_highlight “${dxy_home_work}”) directory or symlink"
  elif [ ! -d "${usr_home_work}" ]; then
    home_work_hint="No $(font_highlight “${usr_home_work}”) directory or symlink"
  fi
  if [ -n "${home_work_hint}" ]; then
    info "$( \
      font_emphasize "Skipped overlay" \
    ) ${dxy_home_work} ↯ ${usr_home_work}\n                             - ${home_work_hint}"
  else
    symlink_overlay_dir \
      "${dxy_home_work}" \
      "${VENDOR_HOME:-DXY_VENDOR_HOME__HOME_}/.mrinfuse"
    symlink_overlay_file \
      "${dxy_home_work}/_ignore" \
      "${VENDOR_HOME:-DXY_VENDOR_HOME__HOME_}/.ignore"
  fi
  #
  # Alert if missing business client mrconfig (because impossibly unlikely user won't want).
  # - E.g., "/home/user/.depoxy/stints"
  local stints_dir="${DEPOXYDIR_STINTS_FULL:-DXY_DEPOXYDIR_STINTS__HOME_}"
  # - E.g., "/home/user/.depoxy/stints/XXXX/_mrconfig-acme"
  local mr_business="${stints_dir}/DXY_DEPOXY_CLIENT_ID/_mrconfig-DXY_VENDOR_NAME"
  if [ ! -f "${mr_business}" ]; then
    info "$(font_emphasize ALERT): No biz config at $(repo_highlight ${mr_business})"
  fi
  #
  # *** DEPOXY
  #
  symlink_overlay_file \
    "${MR_REPO}/home/.depoxy/stints/_ignore" \
    "DXY_DEPOXYDIR_STINTS__HOME_/.ignore"
  #
  # *** BASH
  #
  # DepoXy's generated @biz-specific Bash files.
  # - DEV: Here's where to add your custom @biz-specific Bash:
  #     bashrx.private.DXY_USERNAME.sh.
  #     bashrx.private.DXY_HOSTNAME.sh.
  #   And wire more as you like.
  #
  local bashrx_host="${MR_REPO}/home/bashrx.private.DXY_HOSTNAME.sh"
  #
  if [ -f "${bashrx_host}" ]; then
    symlink_overlay_file \
      "${bashrx_host}" \
      "${HOMEFRIES_DIR:-${HOME}/.homefries}/.bashrc-bin/bashrx.private.DXY_HOSTNAME.sh"
  else
    info "$(font_emphasize ALERT): No DXC bashrc at" \
      "$(repo_highlight ${bashrx_host})"
  fi
  # - ISOFF/2024-05-10: A filed named thusly would also be autoloaded by Homefries.
  #   - But we only need one autoload, then it can load (source) our other files.
  #
  #     local bashrx_user="bashrx.private.$(id -un).sh"
  #     local bashrx_full="${MR_REPO}/home/${bashrx_user}"
  #     #
  #     if [ -f "${bashrx_full}" ]; then
  #       symlink_overlay_file \
  #         "${bashrx_full}" \
  #         "${HOMEFRIES_DIR:-${HOME}/.homefries}/.bashrc-bin/${bashrx_user}"
  #     fi
  #
  # - At an previous client, in the beginning, $(hostname) would report
  #   "HOST.DOMAIN.com". But then (months) later, $(hostname) started to
  #   say "HOST.DOMAIN.com.", with a trailing period. I never figured out
  #   why (or maybe I don't remember checking $(hostname), and really it
  #   was my code that changed?)
  #   - In any case, I doubt we need this version with two-dots:
  #
  #     symlink_overlay_file \
  #       "${MR_REPO}/home/bashrx.private.DXY_HOSTNAME.sh" \
  #       "${HOMEFRIES_DIR:-${HOME}/.homefries}/.bashrc-bin/bashrx.private.DXY_HOSTNAME..sh"
  #
  # *** VIM
  #
  # Replace Vim spell file with symlink to user's version in DXC.
  cast_private_spell () {
    touch "${MR_REPO}/home/.vim/spell/en.utf-8.add"
    mkdir -p "${HOME}/.vim/spell"
    # DepoXy Ambers maintains ~/.mrinfuse, so currently cannot simply:
    #   symlink_mrinfuse_file "spell/en.utf-8.add"
    # but we could probably infuse the mrinfuse'r and then we could use
    # symlink_mrinfuse_file. But seems like unnecessary lift with no big
    # reward.
    symlink_overlay_file \
      "${MR_REPO}/home/.vim/spell/en.utf-8.add" \
      "${HOME}/.vim/spell/en.utf-8.add"
  }
  cast_private_spell
  #
  # Developer Vim tray: Custom Project Tray (Shift-Alt-3) Paths file.
  # - Add vendor-specific project listing to this file.
  symlink_overlay_file \
    "${MR_REPO}/home/.vim/pack/landonb/start/dubs_project_tray/.vimprojects" \
    "${HOME}/.vim/pack/landonb/start/dubs_project_tray/.vimprojects"
  # For the convenience.
  symlink_overlay_file \
    "home/.vim/pack/landonb/start/dubs_project_tray/.vimprojects" \
    "home/.vimprojects"
  #
  # Developer Vim grep: Custom Project Grep (\g) Paths list.
  # - Add vendor-specific project paths to this file.
  symlink_overlay_file \
    "${MR_REPO}/home/.vim/pack/landonb/start/dubs_grep_steady/dubs_projects.vim" \
    "${HOME}/.vim/pack/landonb/start/dubs_grep_steady/dubs_projects.vim"
  # Reload <\g> search list.
  # - If no such instance:
  #     E247: No registered server named "SAMPI": Send failed.
  gvim --servername "${GVIM_OPEN_SERVERNAME:-DXY_DEPOXY_GVIM_SERVERNAME}" \
    --remote-send "<ESC>:GrepSteadyReload<CR>" \
    2> /dev/null || true
  # For the convenience.
  symlink_overlay_file \
    "home/.vim/pack/landonb/start/dubs_grep_steady/dubs_projects.vim" \
    "home/dubs_projects.vim"
  #
  # Developer Vim plug: Custom plug at ~/.vim/pack/DepoXy/start/vim-trap
  # - Use this plugin for vendor-specific Vim config and commands.
  symlink_overlay_dir \
    "${MR_REPO}/home/vim-trap" \
    "${HOME}/.vim/pack/DepoXy/start/vim-trap"
  #
  # *** GIT
  #
  # Git user.name and user.email wirer.
  # - Depending on project path, Git will load either your personal
  #   user config, or it'll load your business user config.
  if [ -f "${MR_REPO}/home/.gitconfig.user" ]; then
    symlink_overlay_file \
      "${MR_REPO}/home/.gitconfig.user" \
      "${HOME}/.gitconfig.user"
  else
    # This is a core DepoXy file, so would be unexpected if not found.
    warn "$(font_emphasize "Skipped .gitconfig.user")" \
      "/ See $(font_highlight “archetype/home/.gitconfig.user.EVAL”)"
  fi
  #
  # Your Personal Git: Your personal user.name and user.email.
  # - Used when committing work to this project (DXY_DEPOXY_CLIENT_ID)
  #   or any of your other (open source) projects you might have.
  if [ -f "${MR_REPO}/home/.gitconfig.user-personal" ]; then
    symlink_overlay_file \
      "${MR_REPO}/home/.gitconfig.user-personal" \
      "${HOME}/.gitconfig.user-personal"
  fi
  #
  # Enterprise Git: Your vendor-specific user.name and user.email.
  # - Used when committing work to vendor projects.
  if [ -f "${MR_REPO}/home/.gitconfig.user-business" ]; then
    symlink_overlay_file \
      "${MR_REPO}/home/.gitconfig.user-business" \
      "${HOME}/.gitconfig.user-business"
  fi
  #
  # `gh` and `hub` apps enterprise Git token.
  # - FIXME/2022-10-23: I removed ~/.github-token mechanism in favor
  #   of storing token in git remote URL, but I didn't test `hub`
  #   command (which I haven't used much recently).
  #   - So I may need to add `. ~/.github-token` back to private Bashrc.
  # - YOU: Make this manually. Don't need to keep in repo.
  #        See: DXY_DEPOXY_CLIENT_TILDE/home/bashrx.private.DXY_HOSTNAME.sh
  #  symlink_overlay_file \
  #    "${MR_REPO}/home/.github-token" \
  #    "${HOME}/.github-token"
  #
  # ~/.gitignore.local wiring
  symlink_overlay_dir \
    "${MR_REPO}/home/_git" \
    "${HOME}/.mrinfuse/_git"
  #
  # See 'infusePostRebase' task for ~/.gitignore hard link.
  #
  # *** tig
  #
  # Note this overwrites DepoXy's ~/.depoxy/ambers/home/.config/tig/config
  # fallback symlink.
  mkdir -p "${HOME}/.config/tig"
  symlink_overlay_file \
    "${MR_REPO}/home/.config/tig/config" \
    "${HOME}/.config/tig/config"
  #
  #
  # *** NPM
  #
  # Enterprise NPM: Client-specific npm registry URL.
  if [ -f "${MR_REPO}/home/.npmrc" ]; then
    symlink_overlay_file \
      "${MR_REPO}/home/.npmrc" \
      "${HOME}/.npmrc"
  fi
  #
  # *** Karabiner-Elements
  #
  # CXREF: DepoXy Ambers KB infuser:
  #   infuse_symlinks_macOS_Karabiner_Elements_complex_modifications
  depoxy_client_infuse_karabiner_elements_complex_modifications () {
    local dxy_mrinfuse="${ambers_path}/home"
    local cmplxmods=".config/karabiner/assets/complex_modifications"
    # Symlink private KE cfg.
    local cbinfuser="${MR_REPO}/home"
    (
      cd "${dxy_mrinfuse}/${cmplxmods}"
      local jsonpath
      # Use -regex to exclude the 3110-client-DXY_DEPOXY_CLIENT_ID-private.json.example file.
      for jsonpath in $(find "${cbinfuser}/${cmplxmods}" -maxdepth 1 -type f -regex ".*\.json$"); do
        symlink_overlay_file "${jsonpath}"
      done
    )
  }
  depoxy_client_infuse_karabiner_elements_complex_modifications
  #
  # *** GPG ℇ PASS
  #
  # YOU: If you'd like to oversee pass using your DepoXy Client, create a
  #      new Password Store and GPG key, copy both ~/.password-store and
  #      ~/.gnupg under DXY_DEPOXY_CLIENT_TILDE/home, and uncomment following
  #      two overlays:
  #
  #  symlink_overlay_dir \
  #    "${MR_REPO}/home/.password-store" \
  #    "${HOME}/.password-store"
  #
  #  symlink_overlay_dir \
  #    "${MR_REPO}/home/.gnupg" \
  #    "${HOME}/.gnupg"
  #
  # *** GNU Inetutils auto-login credentials
  #
  if [ -f "${HOME}/.netrc" ] && [ ! -h "${HOME}/.netrc" ]; then
    warn "Your ~/.netrc is not overseen by your DepoXy Client repo."
    info "Considering moving ~/.netrc inside your DepoXy Client and\n" \
      "                            letting DepoXy Client create a symlink for it at ~/.netrc."
    info "Try: \`mv \"${HOME}/.netrc\" \"${MR_REPO}/home/.netrc\" && infuse\`"
  elif [ -f "${MR_REPO}/home/.netrc" ]; then
    symlink_overlay_file \
      "${MR_REPO}/home/.netrc" \
      "${HOME}/.netrc"
  # else
  #   info " $(font_emphasize "Skipped .netrc")"
  fi
  #
  # *** ~/.finicky.js
  #
  symlink_overlay_file \
    "${MR_REPO}/home/.finicky.js" \
    "${HOME}/.finicky.js"
  #
  # *** ~/.kit
  #
  # What I call the Dopp Kit is where I clone most non-vendor projects,
  # e.g., various Git projects, useful shell utilities, and more. Most
  # of the projects are public/open source and installed by the public
  # DepoXy Ambers project. But you'll probably add additional projects
  # to pair with the vendor code you work on (you can add each project
  # to the _mrconfig-vendor included at the end of this file). Here we
  # install a ~/.kit/.git/info/exclude file (and I know, this function
  # looks more complicated, but really that's all it does).
  user_home_kit_link_private_exclude () {
    # ~/.kit/.gitignore.local wiring.
    #
    # First wire the mrinfuse path.
    symlink_overlay_dir \
      "${MR_REPO}/home/.kit/_git" \
      "${HOME}/.mrinfuse/.kit/_git"
    #
    # Next, call the internal that link_private_exclude calls, but skip
    # link_private_exclude, because we need to kludge around ${MR_REPO}.
    local kit_path="${DOPP_KIT:-${HOME}/.kit}"
    local before_cd="$(pwd -L)"
    local before_mr="${MR_REPO}"
    # Such sneaky:
    MR_REPO="${kit_path}"
    cd "${MR_REPO}"
    link_exclude_resolve_source_and_overlay
    MR_REPO="${before_mr}"
    cd "${before_cd}"
  }
  user_home_kit_link_private_exclude
  #
  # *** ~/.kube
  #
  # MAYBE/2022-12-14: Move this elsewhere, and keep core DepoXy infuse
  # steps separate from steps associated with clients or specifically
  # developing.
  #
  # OpenLens doesn't show any clusters when yaml symlinks used, so
  # wiring yamls (and config, for parity) using hard links.
  if [ -f "${MR_REPO}/home/.kube/config" ]; then
    mkdir -p "${HOME}/.kube"
    #
    # NOPE: Docker Desktop edits main kube config, e.g., changing
    #       `client-certificate-data` and `client-key-data`, and setting
    #       and unsetting `namespace`.
    #         link_hard \
    #           "${MR_REPO}/home/.kube/config" \
    #           "${HOME}/.kube/config"
    # - We'll copy canon file and autocommit just to track it; see autocommit.
  fi
  #
  # See 'infusePostRebase' task for ~/.kube hard links.
  #
  # Alert user if AWS config perhaps not configured appropriately.
  if [ -n "$(ls ~/.kube/*.yaml 2> /dev/null)" ]; then
    if command rg "command: aws" ~/.kube/*.yaml > /dev/null 2>&1; then
      warn
      warn "BWARE: You probably need to use an absolute path to AWS in your kubeconfig."
      warn
      warn "- Instead of using a relative path:"
      warn
      warn "    command: aws"
      warn
      warn "- You probably need to use an absolute path:"
      warn
      warn "    command: $(command -v aws)"
      warn
      warn "- See the following file(s):"
      warn
      command rg "command: aws" ~/.kube/*.yaml
    fi
  fi

# ========================================================================
# ------------------------------------------------------------------------

# YOU: Add client-specific projects to the another config, e.g.,:
#        DXY_DEPOXY_CLIENT_TILDE/_mrconfig-DXY_VENDOR_NAME
#      and reserve this mrconfig for the DepoXy Client project
#      (so you can more easily keep it synced with the upstream).

[DEFAULT]
order = 220
include =
  # Load task helpers (that higher-level OMR config doesn't load, because
  # neither DepoXy Ambers nor Oh My Repos! uses this functionality).
  #
  # ***
  #
  include_git_hooks_rewire () {
    cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/git-hooks-rewire"
  }
  include_git_hooks_rewire
  #
  # ***
  #
  # Load lib fcn `hack_patch_opn_to_call_sensible_open`.
  include_js_npm_patch_opn_sensible_open () {
    local ambers_path="${DEPOXYAMBERS_DIR:-DXY_DEPOXYAMBERS_DIR__HOME_}"
    # CXREF: DXY_DEPOXYAMBERS_DIR_TILDE/home/.kit/git/ohmyrepos/lib/js-npm-patch-opn-sensible-open
    cat "${ambers_path}/home/.kit/git/ohmyrepos/lib/js-npm-patch-opn-sensible-open"
  }
  include_js_npm_patch_opn_sensible_open
  #
  # ***
  #
  # Load vendor-specific OMR project config.
  include_depoxy_client_mr_business () {
    . ${OHMYREPOS_LIB:-${GITREPOSPATH:-${HOME}/.kit/git}/ohmyrepos/lib}/skip-grouping.sh
    #
    local stints_dir="${DEPOXYDIR_STINTS_FULL:-DXY_DEPOXYDIR_STINTS__HOME_}"
    # CXREF: DXY_DEPOXYDIR_STINTS_TILDE/DXY_DEPOXY_CLIENT_ID/_mrconfig-DXY_VENDOR_NAME
    #        DXY_DEPOXYARCHETYPE_DIR_TILDE/_mrconfig-[[[DXY_VENDOR_NAME]]].EVAL
    local mr_business="${stints_dir}/DXY_DEPOXY_CLIENT_ID/_mrconfig-DXY_VENDOR_NAME"
    if [ -f "${mr_business}" ] && ! (
        mr_exclusive "business" "vendor" "DXY_VENDOR_HOME_NAME" &&
        true
      );
    then
      cat "${mr_business}"
    fi
  }
  include_depoxy_client_mr_business

# ========================================================================
# ------------------------------------------------------------------------

