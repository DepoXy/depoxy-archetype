# vim:tw=0:ts=2:sw=2:noet:ft=make:

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# TRICK/2022-12-07: When onboarding a new project, inspect packaging
# and CI/CD config to see what dev tools are used, and how they're
# used. E.g., for each of the following files that exists, read it:
#   .flake8
#   .gitlab-ci.yml
#   .pre-commit-config.yaml
#   packer-app.pkr.hcl
#   pyproject.toml

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# (lb): I admit that make is not the most elegant solution for shelling out
# or even performing conditionals within a rule/target, what with all the
# backslashes and semicolons. (\sorry!;)
HAS_PY_MODULE_OR_ECHO=\
	@verify_has_py_module_or_echo () { \
		local module_name="$$1"; \
		if python -c "import $${module_name}" 2> /dev/null; then \
			return 0; \
		else \
			echo "Skipping \`$${module_name}\`: $(ERROR_MSG)"; \
			return 1; \
		fi \
	}

ERROR_MSG = It is either not used by this project, or you are not in a virtualenv.

# ***

lint-black:
	${HAS_PY_MODULE_OR_ECHO} \
		&& verify_has_py_module_or_echo "black" \
		&& python3 -m black . \
		|| true
.PHONY: lint-black

# ***

lint-flake8:
	${HAS_PY_MODULE_OR_ECHO} \
		&& verify_has_py_module_or_echo "flake8" \
		&& python3 -m flake8 . \
		|| true
.PHONY: lint-flake8

# ***

lint-isort:
	${HAS_PY_MODULE_OR_ECHO} \
		&& verify_has_py_module_or_echo "isort" \
		&& _FLAKE8_LINE_LENGTH=$$(grep -e "^max-line-length\b" .flake8 | awk '{print $$3}') \
		&& _FLAKE8_LINE_LENGTH=$${_FLAKE8_LINE_LENGTH:-88} \
		&& python3 -m isort --profile black --line-length=$${_FLAKE8_LINE_LENGTH} . \
		|| true
.PHONY: lint-isort

# ***

# CXREF: DepoXy `lint-py`.

lint: lint-black lint-flake8 lint-isort
.PHONY: lint

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Static application security testing (SAST)
# https://en.wikipedia.org/wiki/Static_application_security_testing
sast:
	@if ! command -v bandit > /dev/null; then \
		>&2 echo "ERROR: \`bandit\` not installed"; \
		exit 1; \
	fi
	bandit -x ./scripts -ll -f html -o bandit.html -r .
.PHONY: sast

audit: sast
.PHONY: audit

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# DEBUG: Some helpful pytest options:
# * Use -k to specify test name(s)
# * Add -v for verbosity
# * Specify a specific file or path to test
# * Add -x/--exitfirst to fast-fail
#   Or --sw/--stepwise to "exit on test failure
#    and continue from last failing test next time"
# * Allow stdout pass-through using -s/--capture=no
# * --pdb Break at failing line (Not needed to set your own breaks)
# MAYBE/2023-01-31: pdbr's pdbr.set_trace() doesn't break in tests; missing something?
#
#  poetry run pytest --cov=. -k {expression} -v [{path}]
#
#  # Wire pdb.set_trace to pdbr (don't use pdbra.set_trace):
#  poetry run pytest --cov=. -x --pdb --pdbcls=pdbr:RichPdb
#
#  poetry run pytest --cov=.
#  # The <() doesn't work from Makefile like it does copy-paste to the terminal:
#  poetry run pytest --cov=. --cov-config=<(echo -e "[run]\nomit =\n    examples/*")
#  # So from Makefile we call via bash -c.

# Identify package subdirectory for --cov.

PKG_DIR := "not-a-real-path"
#
# - Check first if specified in the Poetry config.
PKG_DIR := "$(shell [ -d "$(PKG_DIR)" ] && echo "$(PKG_DIR)" \
							|| tomlq -r .tool.poetry.name pyproject.toml | sed 's/-/_/g')"
#
# - Otherwise, most projects follow convention: the package subdir. is
#   the undercased parent directory (e.g., GitLab project) name.
PKG_DIR := "$(shell [ -d "$(PKG_DIR)" ] && echo "$(PKG_DIR)" \
							|| echo "$$(basename $$(pwd))" | sed 's/-/_/g')"
#
# - Fallback api/ directory (like one @biz project I worked on).
PKG_DIR := "$(shell [ -d "$(PKG_DIR)" ] && echo "$(PKG_DIR)" \
							|| echo "api")"
#
# - Fallback current directory (run coverage on all of it).
#  - Note that you'll sometimes see a `.gitlab-ci.yml` that specifies
#    `--cov=.` but this isn't usually ideal. For one, it'll include
#    the tests/ directory, which will artificially inflate the overall
#    coverage percent (making it look like you have better coverage
#    than you do).
#  - If you do find yourself computing coverage on the root directory,
#    you might want to omit certain subdirectories. E.g., say the project
#    has an examples/ subdirectory with code that devs run to interact with
#    the app. You could use a tricky shell temporary file to fake an
#    intermediate coverage config file, e.g.,:
#
#      bash -c "poetry run pytest --cov=. --cov-config=<(echo -e '[run]\nomit =\n    examples/*')"
PKG_DIR := "$(shell [ -d "$(PKG_DIR)" ] && echo "$(PKG_DIR)" \
							|| echo ".")"

test:
	poetry run pytest --cov=$(PKG_DIR)
.PHONY: test

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# As mentioned above, you generally don't want coverage of test files
# themselve, because it'll inflate the overall coverage percentage.
# But sometimes you want to see tests/ coverage so you can audit for
# dead test code.
test-tests:
	@$(shell [ ! -d "tests" ] && >&2 echo "No tests/ directory" && return 1)
	poetry run pytest --cov=$(PKG_DIR) --cov=tests/
.PHONY: test-tests

cov-tests: test-tests cov-html cov-view
.PHONY: cov-tests

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

COV_PATH = "$(shell pwd)/htmlcov/index.html"

# ***

cov-html:
	poetry run coverage html
.PHONY: cov-html

# ***

cov-view:
	@if which sensible-open > /dev/null; then \
		sensible-open "$(COV_PATH)"; \
	else \
		open -na 'Google Chrome' --args --new-window "$(COV_PATH)"; \
	fi
.PHONY: cov-view

# Just an alias/synonym.
cov-open: cov-view
.PHONY: cov-open

#***

cov: test cov-html cov-view
.PHONY: cov

# Just an alias/synonym.
coverage: cov
.PHONY: coverage

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

