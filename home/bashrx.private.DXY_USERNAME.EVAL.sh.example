# USAGE:
#   m4_shim \
#     "+11" "home/bashrx.private.DXY_USERNAME.EVAL.sh.example" \
#     "home/bashrx.private.${DXY_USERNAME}.sh.example" \
#     "BUSINESS_PROJECT_BASE" \
#       "https://${BUSINESS_GITCONFIG_HUB_HOST}/$(dirname "${BUSINESS_GITSERVER_USER_REPO}")"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# DXY_HEADER_DOTFILES

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# USAGE: Below are some examples of private Bashrc the author has
#        used in the past. If you find this useful, make this file
#        your own, e.g.,:
#
#          DXY_DEPOXY_CLIENT_TILDE/home/bashrx.private.DXY_HOSTNAME.sh
#          cd DXY_DEPOXY_CLIENT_TILDE/home/
#          cp bashrx.private.$(id -un).sh.example bashrx.private.$(id -un).sh
#          # Don't forget to wire the symlink into Homefries!
#          infuse

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# YOU: Add aliases as appropriate to the individual client projects.
#
# - E.g., if I was working on a application named 'project-AA', I
#   might make an alias called `cdaa`.
#
#   Or perhaps if the application was called, 'superflycool', I might
#   make an alias called `cdsf` or `cdsfc`.
#
#   Basically, I like to use the `cd` prefix and then two or three
#   characters from the project name as an abbreviation or mnemonic
#   to help me remember the alias.

bashdx_wire_aliases_pushd_paths_client () {
  # My BUSINESS_PROJECT_BASE projects
  pushd_alias_or_warn "ddun" "${HOME}/.depoxy/running/BUSINESS_PROJECT_NAME_DOTFILES"
  pushd_alias_or_warn "ddac" "${HOME}/.depoxy/running/home/work/acme.sh"

  # You: Remove these aliases and add your own.

  # 2023-01-26: Lately I've been using `dd`- prefix instead of `cd`:
  # - It's easier to type, and `dd<Tab>` shows only these aliases
  #   (where 'cd'-prefix used by a lot of other commands already).

  pushd_alias_or_warn "cdaa" "${HOME}/BUSINESS_CODE_PATH/division1/project-AA"
  # I'll sometimes create a sibling directory with the 'develop' branch
  # checked out so that `feature-coverage-report` runs coverage in parallel.
  pushd_alias_or_warn "cdaad" "${HOME}/BUSINESS_CODE_PATH/division1/project-AA--develop"
  
  pushd_alias_or_warn "cdsf" "${HOME}/BUSINESS_CODE_PATH/projectZ/superflycool"
  pushd_alias_or_warn "cdsfd" "${HOME}/BUSINESS_CODE_PATH/projectZ/superflycool--develop"

  # YOU: If you have more complicated setup, you could shove that in an
  # alias, or better yet, kick it out to its own function. For example,
  function cdbb {
    pushd "${HOME}/BUSINESS_CODE_PATH/division1/project-BB" &> /dev/null;
    [ "$(node -v)" = "v10.23.0" ] || nvm use 10
  }
  # You might also want to look into using dotenv or direnv.
  #   https://direnv.net/
  # Or employ the _work_env_* mechanisms discussed next.
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Advanced `cd` Project example.
#
# This is change-directory `cdXX` example that grows its own direnv-like
# enter setup and exit cleanup. Except rather than run the exit code when
# you leave the project directory, it'll run when you `cdXX` to another
# project (that uses the same mechanism).
#
# See the _work_env_* defs in ~/.depoxy/ambers/core/cdworkenv.sh

cdta () {
  pushd "${HOME}/BUSINESS_CODE_PATH/division1/total-appage" &> /dev/null

  [ "$(node -v)" = "v14.16.0" ] || nvm use 14

  _work_env_prepare

  # Set the URL to the 'test' environment.
  _work_env_define 'WORK_URL_TEST' \
    'https://test-total-appage.domain.com/app.html'

  # Set the URL to the 'stage' environments.
  # - Perhaps there are many, one for different portals.
  # PORTAL_A
  _work_env_define 'WORK_URL_STAGE_PORTAL_A' \
    'https://stage-portal-a.domain.com/path/to/app.html'
  # portal_iii:
  _work_env_define 'WORK_URL_STAGE_portal_iii' \
    'https://stage-portal-iii.domain.com/path/to/app.html'
  # The default stage URL:
  _work_env_define 'WORK_URL_STAGE' "${PORTAL_A}"

  # IDEA: You could develop this environ concept further, e.g.,
  # make it easy to open Jenkins from the command line:
  #
  # _work_env_define 'JENKINS_DEVELOP' \
  #   'https://jenkins.domain.com/job/division1/job/total-appage/job/develop/'
  # _work_env_define 'JENKINS_RELEASE' \
  #   'https://jenkins.domain.com/job/division1/job/total-appage/job/release/'
  # _work_env_define 'JENKINSFILE_URL' \
  #   'https://github.domain.com/division1/jenkins-library/blob/release/total-appage.groovy'
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# YOU: Set this to run a command when the terminal starts.
# - E.g., if you wanted to change to the project-AA directory
#   using the alias you set above, you could do this:
bashhf_set_start_command () {
  HOMEFRIES_EVAL='cdaa'
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ----------------------------------------------------------------- #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# YOU: Don't forget to update main with what commands you copy to your
#      private Bashrc, e.g.:

main () {
  # Wait for the second pass to run.
  ${HOME_FRIES_PRELOAD} && return

  bashdx_wire_aliases_pushd_paths_client
  unset -f bashdx_wire_aliases_pushd_paths_client

  bashhf_set_start_command
  unset -f bashhf_set_start_command
}

main "$@"
unset -f main

